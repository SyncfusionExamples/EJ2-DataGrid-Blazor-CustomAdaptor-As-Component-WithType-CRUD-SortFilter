@using CustomAdaptorSample.Data
@using Newtonsoft.Json
@using System.Text.Json.Serialization

@inherits DataAdaptor<OrderDataAccessLayer>

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>


@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }


    // Performs data Read operation
    public override object Read(DataManagerRequest dm, string key = null)
    {
        IEnumerable<Order> DataSource = (IEnumerable<Order>)Service.GetAllOrders().ToList();
        if (dm.Search != null && dm.Search.Count > 0)
        {
            // Searching
            DataSource = DataOperations.PerformSearching(DataSource, dm.Search);
        }
        if (dm.Sorted != null && dm.Sorted.Count > 0)
        {
            // Sorting
            DataSource = DataOperations.PerformSorting(DataSource, dm.Sorted);
        }
        if (dm.Where != null && dm.Where.Count > 0)
        {
            // Filtering
            DataSource = DataOperations.PerformFiltering(DataSource, dm.Where, dm.Where[0].Operator);
        }
        int count = DataSource.Cast<Order>().Count();
        if (dm.Skip != 0)
        {
            //Paging
            DataSource = DataOperations.PerformSkip(DataSource, dm.Skip);
        }
        if (dm.Take != 0)
        {
            DataSource = DataOperations.PerformTake(DataSource, dm.Take);
        }
        return dm.RequiresCounts ? new DataResult() { Result = DataSource, Count = count } : (object)DataSource;
    }

    // Performs Insert operation
    public override object Insert(DataManager dm, object value, string key)
    {
        Service.AddOrder(value as CustomAdaptorSample.Data.Order);
        return value;
    }

    // Performs Remove operation
    public override object Remove(DataManager dm, object value, string keyField, string key)
    {
        Service.DeleteOrder(value as int?);
        return value;
    }

    // Performs Update operation
    public override object Update(DataManager dm, object value, string keyField, string key)
    {
        Service.UpdateOrder(value as CustomAdaptorSample.Data.Order);
        return value;
    }

}


